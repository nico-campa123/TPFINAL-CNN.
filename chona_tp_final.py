# -*- coding: utf-8 -*-
"""CHONA-TP-FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1REBDEaodxw_NxKplN7NVPHT7dzplzAUK

**Integrantes: Nicolas Fernandez - Mauro Fiore - Nicolas Campanario**

**Nuestro dataset**: CIFAR-10, una recopilacion de 60,000 imagenes de 32x32 pixeles, que se dividen en 10 categorias.

Nosotros vamos a usar el que viene integrado con Keras

Kaggle: https://www.kaggle.com/c/cifar-10/data

Csv:
https://drive.google.com/file/d/1IPS0kzSsIeDsLJLmyyTbG5zDI3y_jThI/view?usp=sharing
"""

import tensorflow as tf
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras import datasets, layers, models
from sklearn.metrics import confusion_matrix

#Leer dataset directo de Keras

df = datasets.cifar10.load_data()
df

# Cargar el dataset de Keras y dividirlo en train/test split
(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()

# Convertir las imagenes a valores de 0 a 1 para facilitar el entrenamiento
x_train, x_test = x_train / 255.0, x_test / 255.0

# Tama√±o de los datos
print(f"Train: {x_train.shape}, Test: {x_test.shape}")

# Darle nombres a los labels del dataset
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

#Mostrar algunas imagenes
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(x_train[i])
    plt.title(class_names[y_train[i][0]])
    plt.axis('off')
plt.show()

model = models.Sequential([

    # Activar layer convolucional de input
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    # Segundo layer
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    # Tercer layer
    layers.Conv2D(64, (3, 3), activation='relu'),

    layers.Flatten(), #Convertir el output 2D a 1D

    layers.Dense(64, activation='relu'),

    #Output para que claifique entre 10 clases/categorias
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#history = model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))
#5 epochs: accuracy = 70

#Entrenar modelo con 10 epochs
history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Test accuracy: {test_acc}")

plt.plot(history.history['accuracy'])

# Make predictions on the first 5 test images
predictions = model.predict(x_test[:25])

# Plot the test images with their predictions
plt.figure(figsize=(10, 10))
for i in range(5):
    plt.subplot(1, 5, i + 1)
    plt.imshow(x_test[i])
    plt.title(f"Pred: {class_names[predictions[i].argmax()]}\nTrue: {class_names[y_test[i][0]]}")
    plt.axis('off')
plt.show()

# Predecir 9 imagenes para testear la accuracy
predictions = model.predict(x_test[:9])

# Plottear las predicciones en una tabla 3x3
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(x_test[i])
    predicted_label = class_names[predictions[i].argmax()]
    true_label = class_names[y_test[i][0]]

    # Cambiar el color si esta bien o mal (rojo o negro)
    color = "green" if predicted_label == true_label else "red"
    plt.title(f"Pred: {predicted_label}\nTrue: {true_label}", color=color)
    plt.axis('off')

plt.tight_layout()
plt.show()

#Predecir todo el x_test
y_pred = np.argmax(model.predict(x_test), axis=1)

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Mapear los resultados
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Prediccion')
plt.ylabel('Verdadero')
plt.title('Confusion Matrix')
plt.show()